/* Benchmark_Enclave.edl - Top EDL file. */
enclave { 
	include "wolfssl/ssl.h"
	include "wolfssl/wolfcrypt/settings.h"
	include "wolfssl/wolfcrypt/types.h"
	include "wolfssl/wolfcrypt/sha256.h"
	include "wolfssl/wolfcrypt/aes.h"
	include "wolfssl/wolfcrypt/rsa.h"
	include "wolfssl/wolfcrypt/random.h"

    include "wolfcrypt/test/test.h"
    include "wolfcrypt/benchmark/benchmark.h"


    trusted {

		/* SHA 256 operations
		 * Using user_check to increase performance, in copies over the buffer */
		public int wc_sha256_init([user_check]Sha256* sha256);
		public int wc_sha256_update([user_check]Sha256* sha256, [user_check]byte* buf, int bufSz);
		public int wc_sha256_final([user_check]Sha256* sha256, [user_check]byte* digest);


		/* AES GCM opperations
		 * Using user_check to increase performance */
		public int wc_aesgcm_setKey([user_check]Aes* aes, [user_check]const byte* key, word32 len);
		public int wc_aesgcm_encrypt([user_check]Aes* aes, [user_check]byte* out,
                                     [user_check]const byte* in, word32 sz,
                                     [user_check]const byte* iv, word32 ivSz,
                                     [user_check]byte* authTag, word32 authTagSz,
                                     [user_check]const byte* authIn, word32 authInSz);
		public int wc_aesgcm_decrypt([user_check]Aes* aes, [user_check]byte* out,
                                     [user_check]const byte* in, word32 sz,
                                     [user_check]const byte* iv, word32 ivSz,
                                     [user_check]const byte* authTag, word32 authTagSz,
                                     [user_check]const byte* authIn, word32 authInSz);

		/* RSA opperations
		 * Using user_check to increase performance */
		public int wc_rsa_encrypt([user_check]const byte* m, word32 mSz, [user_check]byte* out, word32 outSz, [user_check]RsaKey* key);
		public int wc_rsa_decrypt([user_check]const byte* in, word32 inSz, [user_check]byte* out, word32 mSz, [user_check]RsaKey* key);
		public int wc_rsa_init([user_check]RsaKey* rsa);
		public int wc_rsa_free([user_check]RsaKey* rsa);

        public int wc_test([user_check]void* args);
        public int wc_benchmark_test([user_check]void* args);

		public int enc_wolfSSL_Init(void);
		public void enc_wolfSSL_Debugging_ON(void);
		public WOLFSSL_METHOD* enc_wolfTLSv1_2_client_method(void);
		public WOLFSSL_CTX* enc_wolfSSL_CTX_new([user_check] WOLFSSL_METHOD* method);
        public int enc_wolfSSL_CTX_use_PrivateKey_buffer([user_check] WOLFSSL_CTX* ctx,
												[in, size=sz] const unsigned char* buf,
												long sz,
												int type);
        public int enc_wolfSSL_CTX_load_verify_buffer([user_check] WOLFSSL_CTX* ctx,
												[in, size=sz] const unsigned char* buf,
												long sz,
												int type);
        public int enc_wolfSSL_CTX_use_certificate_chain_buffer_format([user_check] WOLFSSL_CTX* ctx,
												[in, size=sz] const unsigned char* buf,
												long sz,
												int type);
        public WOLFSSL* enc_wolfSSL_new([user_check] WOLFSSL_CTX* ctx);
		public int enc_wolfSSL_set_fd([user_check]WOLFSSL* ssl, int fd);
		public int enc_wolfSSL_connect([user_check]WOLFSSL* ssl);
		public int enc_wolfSSL_write([user_check]WOLFSSL* ssl,
									 [in, size=sz] const void* in,
									 int sz);
		public int enc_wolfSSL_get_error([user_check]WOLFSSL* ssl,
										 int ret);
		public int enc_wolfSSL_read([user_check]WOLFSSL* ssl,
									[out, size=sz]void* out,
									int sz);
		public void enc_wolfSSL_free([user_check]WOLFSSL* ssl);
		public void enc_wolfSSL_CTX_free([user_check]WOLFSSL_CTX* ctx);
		public int enc_wolfSSL_Cleanup(void);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print_string([in, string] const char* str);
        void ocall_current_time([user_check] double* time);
        void ocall_low_res_time([user_check] int* time);
        size_t ocall_recv(int sockfd, [out, size=len] void *buf, size_t len, int flags) propagate_errno;
        size_t ocall_send(int sockfd, [in, size=len] const void *buf, size_t len, int flags) propagate_errno;
    };
};
